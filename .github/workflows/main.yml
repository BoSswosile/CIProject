name: Staging CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_staging:
        description: 'Deploy to staging after successful build'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  ALLOW_AZURE_DEPLOYMENT: ${{ github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_staging == 'true') }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: backend/requirements*.txt

      - name: Install Frontend Dependencies
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm ci

      - name: Install Backend Dependencies
        if: matrix.component == 'backend'
        run: |
          cd backend
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Lint Frontend
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm run lint

      - name: Lint Backend
        if: matrix.component == 'backend'
        run: |
          cd backend
          npm run lint

      - name: Test Frontend
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          CI=true npm run test -- --coverage --watchAll=false

      - name: Test Backend
        if: matrix.component == 'backend'
        run: |
          cd backend
          npm run test

      - name: Upload Frontend Coverage
        if: matrix.component == 'frontend'
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Upload Backend Coverage
        if: matrix.component == 'backend'
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      - name: Run Cypress E2E Tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          start: npm start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome

      - name: Upload Cypress Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots
          retention-days: 7

      - name: Upload Cypress Videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: frontend/cypress/videos
          retention-days: 7

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, e2e-tests]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch')
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: |
      (github.ref != 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    environment: staging
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.STAGING_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.STAGING_REGISTRY_USERNAME }}
          password: ${{ secrets.STAGING_REGISTRY_PASSWORD }}
      
      - name: Build and push Frontend Docker image to Staging Registry
        run: |
          docker build ./frontend -t ${{ secrets.STAGING_REGISTRY_LOGIN_SERVER }}/frontend:staging-${{ github.sha }}
          docker push ${{ secrets.STAGING_REGISTRY_LOGIN_SERVER }}/frontend:staging-${{ github.sha }}

      - name: Build and push Backend Docker image to Staging Registry
        run: |
          docker build ./backend -t ${{ secrets.STAGING_REGISTRY_LOGIN_SERVER }}/backend:staging-${{ github.sha }}
          docker push ${{ secrets.STAGING_REGISTRY_LOGIN_SERVER }}/backend:staging-${{ github.sha }}

      - name: Deploy Frontend to Staging Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ secrets.STAGING_RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.STAGING_RESOURCE_GROUP }}-frontend-${{ github.run_number }}
          image: ${{ secrets.STAGING_REGISTRY_LOGIN_SERVER }}/frontend:staging-${{ github.sha }}
          registry-login-server: ${{ secrets.STAGING_REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.STAGING_REGISTRY_USERNAME }}
          registry-password: ${{ secrets.STAGING_REGISTRY_PASSWORD }}
          name: aci-frontend-staging
          location: 'west europe'
          ports: '80'
          protocol: 'TCP'

      - name: Deploy Backend to Staging Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ secrets.STAGING_RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.STAGING_RESOURCE_GROUP }}-backend-${{ github.run_number }}
          image: ${{ secrets.STAGING_REGISTRY_LOGIN_SERVER }}/backend:staging-${{ github.sha }}
          registry-login-server: ${{ secrets.STAGING_REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.STAGING_REGISTRY_USERNAME }}
          registry-password: ${{ secrets.STAGING_REGISTRY_PASSWORD }}
          name: aci-backend-staging
          location: 'west europe'
          ports: '8000'
          protocol: 'TCP'

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "🎉 Staging Deployment successful!"
          echo "✅ Staging deployment completed successfully"
          echo "🌐 Frontend URL: https://${{ secrets.STAGING_RESOURCE_GROUP }}-frontend-${{ github.run_number }}.westeurope.azurecontainer.io"
          echo "🔧 Backend URL: https://${{ secrets.STAGING_RESOURCE_GROUP }}-backend-${{ github.run_number }}.westeurope.azurecontainer.io"
          echo "✅ E2E tests passed (ran before build)"
          # Add notification logic here (Slack, Teams, email, etc.)

      - name: Notify Deployment Failure
        if: needs.deploy-staging.result == 'failure'
        run: |
          echo "❌ Staging Deployment failed!"
          echo "🔴 Staging deployment failed"
          # Add failure notification logic here