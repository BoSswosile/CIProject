name: Production and Staging Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      confirm_deployment:
        description: 'Type "DEPLOY TO PRODUCTION" to confirm production or "DEPLOY TO STAGING" for staging'
        required: true
        default: ''
      version_tag:
        description: 'Docker image tag to deploy (leave empty for latest)'
        required: false
        default: 'latest'
      reason:
        description: 'Reason for deployment'
        required: true
        default: ''

jobs:
  validate-input:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY TO PRODUCTION" ]; then
              echo "‚ùå Invalid confirmation for production. Must type exactly: DEPLOY TO PRODUCTION"
              exit 1
            fi
          elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY TO STAGING" ]; then
              echo "‚ùå Invalid confirmation for staging. Must type exactly: DEPLOY TO STAGING"
              exit 1
            fi
          else
            echo "‚ùå Invalid environment selected"
            exit 1
          fi
          echo "‚úÖ Deployment confirmed for ${{ github.event.inputs.environment }}"
          echo "üè∑Ô∏è Version: ${{ github.event.inputs.version_tag }}"
          echo "üìù Reason: ${{ github.event.inputs.reason }}"
          echo "üë§ Requested by: ${{ github.actor }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate-input
    if: github.event.inputs.environment == 'production'
    environment: 
      name: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Production Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push Frontend Docker image to Production Registry
        run: |
          docker build ./frontend -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:prod-${{ github.event.inputs.version_tag }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:prod-${{ github.event.inputs.version_tag }}

      - name: Build and push Backend Docker image to Production Registry
        run: |
          docker build ./backend -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:prod-${{ github.event.inputs.version_tag }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:prod-${{ github.event.inputs.version_tag }}

      - name: Deploy Frontend to Production Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.RESOURCE_GROUP }}-frontend-prod
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:prod-${{ github.event.inputs.version_tag }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: aci-frontend-production
          location: 'west europe'
          ports: '80'
          protocol: 'TCP'

      - name: Deploy Backend to Production Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.RESOURCE_GROUP }}-backend-prod
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:prod-${{ github.event.inputs.version_tag }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: aci-backend-production
          location: 'west europe'
          ports: '8000'
          protocol: 'TCP'

      - name: Production Deployment Summary
        run: |
          echo "üöÄ PRODUCTION DEPLOYMENT COMPLETED"
          echo "====================================="
          echo "üë§ Deployer: ${{ github.actor }}"
          echo "üìù Reason: ${{ github.event.inputs.reason }}"
          echo "üè∑Ô∏è Version: ${{ github.event.inputs.version_tag }}"
          echo "üìÖ Time: $(date)"
          echo "üåø Branch: ${{ github.ref }}"
          echo "üìã Commit: ${{ github.sha }}"
          echo "üåê Frontend URL: https://${{ secrets.RESOURCE_GROUP }}-frontend-prod.westeurope.azurecontainer.io"
          echo "üîß Backend URL: https://${{ secrets.RESOURCE_GROUP }}-backend-prod.westeurope.azurecontainer.io"
          echo "====================================="

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Notify Success
        if: |
          (needs.deploy-production.result == 'success') ||
          (needs.deploy-staging.result == 'success')
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "üéâ PRODUCTION DEPLOYMENT SUCCESSFUL!"
            echo "üåê Production Frontend: https://${{ secrets.RESOURCE_GROUP }}-frontend-prod.westeurope.azurecontainer.io"
            echo "üîß Production Backend: https://${{ secrets.RESOURCE_GROUP }}-backend-prod.westeurope.azurecontainer.io"
          fi
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "üéâ STAGING DEPLOYMENT SUCCESSFUL!"
            echo "üåê Staging Frontend: https://${{ secrets.RESOURCE_GROUP }}-frontend-staging.westeurope.azurecontainer.io"
            echo "üîß Staging Backend: https://${{ secrets.RESOURCE_GROUP }}-backend-staging.westeurope.azurecontainer.io"
          fi
          echo "üë§ Deployed by: ${{ github.actor }}"
          echo "üìù Reason: ${{ github.event.inputs.reason }}"
          echo "üè∑Ô∏è Version: ${{ github.event.inputs.version_tag }}"
          echo "üìÖ Deployment Time: $(date)"
          # Add notification logic here (Slack, Teams, email, etc.)

      - name: Notify Failure
        if: |
          (needs.deploy-production.result == 'failure') ||
          (needs.deploy-staging.result == 'failure')
        run: |
          if [ "${{ needs.deploy-production.result }}" == "failure" ]; then
            echo "‚ùå PRODUCTION DEPLOYMENT FAILED!"
          fi
          if [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
            echo "‚ùå STAGING DEPLOYMENT FAILED!"
          fi
          echo "üë§ Attempted by: ${{ github.actor }}"
          echo "üìù Reason: ${{ github.event.inputs.reason }}"
          echo "üè∑Ô∏è Version: ${{ github.event.inputs.version_tag }}"
          echo "üìÖ Failed at: $(date)"
          # Add failure notification logic here

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate-input
    if: github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Staging Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push Frontend Docker image to Staging Registry
        run: |
          docker build ./frontend -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:staging-${{ github.event.inputs.version_tag }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:staging-${{ github.event.inputs.version_tag }}

      - name: Build and push Backend Docker image to Staging Registry
        run: |
          docker build ./backend -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:staging-${{ github.event.inputs.version_tag }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:staging-${{ github.event.inputs.version_tag }}

      - name: Deploy Frontend to Staging Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.RESOURCE_GROUP }}-frontend-staging
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:staging-${{ github.event.inputs.version_tag }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: aci-frontend-staging
          location: 'west europe'
          ports: '80'
          protocol: 'TCP'

      - name: Deploy Backend to Staging Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.RESOURCE_GROUP }}-backend-staging
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:staging-${{ github.event.inputs.version_tag }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: aci-backend-staging
          location: 'west europe'
          ports: '8000'
          protocol: 'TCP'

      - name: Staging Deployment Summary
        run: |
          echo "üöÄ STAGING DEPLOYMENT COMPLETED"
          echo "====================================="
          echo "üë§ Deployer: ${{ github.actor }}"
          echo "üìù Reason: ${{ github.event.inputs.reason }}"
          echo "üè∑Ô∏è Version: ${{ github.event.inputs.version_tag }}"
          echo "üìÖ Time: $(date)"
          echo "üåø Branch: ${{ github.ref }}"
          echo "üìã Commit: ${{ github.sha }}"
          echo "üåê Frontend URL: https://${{ secrets.RESOURCE_GROUP }}-frontend-staging.westeurope.azurecontainer.io"
          echo "üîß Backend URL: https://${{ secrets.RESOURCE_GROUP }}-backend-staging.westeurope.azurecontainer.io"
          echo "====================================="
